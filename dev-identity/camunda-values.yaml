# Chart values for the Camunda Platform 8 Helm chart.
# This file deliberately contains only the values that differ from the defaults.
# For changes and documentation, use your favorite diff tool to compare it with:
# https://github.com/camunda/camunda-platform-helm/blob/main/charts/camunda-platform/values.yaml

# This is a very small cluster useful for running locally and for development

global:
  image:
    # allways work with the latest versions in development
    tag: latest
  identity:
    auth:
      # Disable the Identity authentication
      # it will fall back to basic-auth: demo/demo as default user
      enabled: true

tasklist:
  # Enabled if true, the tasklist deployment and its related resources are deployed via a helm release
  enabled: true
  # Env can be used to set extra environment variables on each Tasklist container
  env: 
    # Required to enabled tasklist API access while it is not enabled by default
    - name: "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI"
      value: "http://camunda-keycloak:80/auth/realms/camunda-platform"
    - name: "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWKSETURI"
      value: "http://camunda-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"

identity:
  enabled: true
  # Keycloak configuration, for the keycloak dependency chart which is used by identity. See the chart documentation https://github.com/bitnami/charts/tree/master/bitnami/keycloak#parameters for more details.
  # keycloak:
  #   # Keycloak.service configuration, to configure the service which is deployed along with keycloak
  #   service:
  #     # Keycloak.service.type can be set to change the service type.
  #     # We use clusterIP for keycloak service, since per default LoadBalancer is used, which is not supported on all cloud providers.
  #     # This might prevent scheduling of the service.
  #     type: ClusterIP
  #   ## Keycloak authentication parameters
  #   ## ref: https://github.com/bitnami/bitnami-docker-keycloak#admin-credentials
  #   ##
  #   ## Identity uses the secrets generated by keycloak, to access keycloak.
  #   auth:
  #     # Keycloak.auth.adminUser defines the keycloak administrator user
  #     adminUser: admin


optimize:
  enabled: false

zeebe:
  clusterSize: 1
  partitionCount: 1
  replicationFactor: 1
  pvcSize: 1Gi

  resources:
    requests:
      cpu: "100m"
      memory: "512M"
    limits:
      cpu: "512m"
      memory: "2Gi"

zeebe-gateway:
  replicas: 1

  resources:
    requests:
      cpu: "100m"
      memory: "512M"
    limits:
      cpu: "1000m"
      memory: "1Gi"

  logLevel: ERROR

elasticsearch:
  enabled: true
  imageTag: 7.17.3
  replicas: 1
  minimumMasterNodes: 1
  # Allow no backup for single node setups
  clusterHealthCheckParams: "wait_for_status=yellow&timeout=1s"

  resources:
    requests:
      cpu: "100m"
      memory: "512M"
    limits:
      cpu: "1000m"
      memory: "2Gi"

  # Request smaller persistent volumes.
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    storageClassName: "standard"
    resources:
      requests:
        storage: 15Gi