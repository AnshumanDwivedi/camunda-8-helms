# ------------------------------------
# Set the following for your specific environment
# Already have a Cluster? Set these values to point to your existing environment
# Otherwise, these values will be used to create a new Cluster

project ?= camunda-researchanddevelopment
region ?= us-east1-b # see: https://cloud.withgoogle.com/region-picker/
clusterName ?= dave-camunda-01

# Configure the fully qualified domain name
# A fully qualified domain name is built by appending `dnsLabel` together with `baseDomainName`.
# By default, this is setup to use `nip.io`.
# To use a custom domain name, replace with a domain name you control, for example:
# baseDomainName ?= mydomain.com
baseDomainName ?= upgradingdave.com

# If using a custom domain name, replace `MY_DNS_LABEL` with your custom dns label.
# For example, if you set `dnsLabel` to `camunda`, then the fqdn will be `camunda.mydomain.com`
dnsLabel ?= gke

machineType ?= n1-standard-16
minSize ?= 1
maxSize ?= 6
certEmail ?= david.paroulek@camunda.com

# Only used for oauth2-proxy
clientSecret ?= Iy0A5ZikhBz1fVlGC5XT2dtOWwJrSIMC

# ------------------------------------
# The following variables should not be changed except for advanced use cases

root ?= $(shell pwd)/../../../..

# Camunda components will be installed into the following Kubernetes namespace
namespace ?= camunda
# Helm release name
release ?= camunda
# Helm chart coordinates for Camunda
chart ?= camunda/camunda-platform

# This file will be generated by make targets
chartValues ?= camunda-values-nginx-fqdn.yaml

.PHONY: all
all: cert-manager letsencrypt-prod ingress-nginx-tls camunda-values-nginx-fqdn.yaml camunda annotate-ingress-tls external-urls

# 0 kube from cluster.mk: Create Kubernetes cluster. (No aplication gateway required)
.PHONY: kube
kube: kube-gke metrics

# 1 cert-manager from cert-manager.mk: create certificate manager for tls

# 2 letsencrypt-staging/-prod from cert-manager.mk: create letsencrypt cert issuer

# 3 create nginx ingress controller with dns and tls

# 4 create camunda-values-nginx.yaml with external ip from ingress controller's Loadbalancer

# 5 helm install camunda from camunda.mk with own tls config, combined ingress

# 6 annotate-ingress-tls from cert-manager.mk: add cluster-issuer annotation to nginx

# 7 Show external URLs
.PHONY: external-urls
external-urls: fqdn
	@echo IP address of Load balancer: $(IP)
	@echo https://$(fqdn)/auth
	@echo https://$(fqdn)/identity
	@echo https://$(fqdn)/operate
	@echo https://$(fqdn)/tasklist
	@echo https://$(fqdn)/optimize
	@echo zbctl status --address $(fqdn):443

# Getting url for grafana is vendor specific
.PHONY: url-grafana
url-grafana:
	@echo "http://`kubectl get svc metrics-grafana-loadbalancer -n default -o 'custom-columns=ip:status.loadBalancer.ingress[0].ip' | tail -n 1`/d/I4lo7_EZk/zeebe?var-namespace=$(namespace)"

.PHONY: clean-kube
clean-kube: clean-metrics clean-kube-gke

.PHONY: clean
clean: clean-camunda clean-ingress clean-cert-manager
	rm -f $(root)/google/ingress/nginx/tls/camunda-values-nginx-fqdn.yaml

include $(root)/include/camunda.mk
include $(root)/include/ingress-nginx.mk
include $(root)/include/cert-manager.mk
include $(root)/google/include/kubernetes-gke.mk
include $(root)/metrics/metrics.mk
include $(root)/benchmark/benchmark.mk
include $(root)/echo-server/echo.mk
include $(root)/oauth2-proxy/oauth2.mk
include $(root)/benchmark/benchmark.mk
