# ------------------------------------
# Set the following for your specific environment
# Already have a Cluster? Set these values to point to your existing environment
# Otherwise, these values will be used to create a new Cluster

region ?= eastus
clusterName ?= dave-camunda-01
resourceGroup ?= dave-camunda-01-rg

# Configure the fully qualified domain name
# A fully qualified domain name is built by appending `dnsLabel` together with `baseDomainName`.

# In Azure, we can use the `cloudapp.azure.com` base domain.
#useAzureDomain ?= true
#baseDomainName ?= $(region).cloudapp.azure.com

# Another option is to replace baseDomainName with your own domain name
baseDomainName ?= azure.upgradingdave.com

# Yet another option option is to use `nip.io`
#baseDomainName ?= nip.io

# Replace `MY_DNS_LABEL`. `dnsLabel` will be added in front of `baseDomainName` to produce a fqdn
dnsLabel ?= dave01
dnsZoneGroup ?= presales-consulting

ipAddress ?= 52.149.137.147

# clusterIssuer ?= letsencrypt
clusterIssuer ?= selfsigned-issuer

machineType ?= Standard_A8_v2
minSize ?= 1
maxSize ?= 6
certEmail ?= david.paroulek@camunda.com

# ------------------------------------
# The following variables should not be changed except for advanced use cases
ifeq ($(OS),Windows_NT)
    root ?= $(CURDIR)/../../../..
else
    root ?= $(shell pwd)/../../../..
endif

# Camunda components will be installed into the following Kubernetes namespace
namespace ?= camunda
# Helm release name
release ?= camunda
# Helm chart coordinates for Camunda
chart ?= camunda/camunda-platform

# This file will be generated by make targets
chartValues ?= camunda-values-nginx-all.yaml

.PHONY: all
all: azure-ingress-nginx dns-create-a-record cert-manager letsencrypt-staging camunda-values-nginx-all.yaml camunda annotate-ingress-tls external-urls

# 0 kube from aks.mk: Create Kubernetes cluster. (No aplication gateway required)
.PHONY: kube
kube: kube-aks metrics

# 1 cert-manager from cert-manager.mk: create certificate manager for tls

# 2 letsencrypt-staging/-prod from cert-manager.mk: create letsencrypt cert issuer

# 3 azure-ingress-nginx create nginx ingress controller with dns and tls

# 4 create camunda-values-nginx-all.yaml

# 5 helm install camunda from camunda.mk with own tls config, combined ingress

# 6 annotate-ingress-tls from cert-manager.mk: add cluster-issuer annotation to nginx
#  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$DNS_LABEL \
#  --set controller.service.loadBalancerIP=$STATIC_IP \
#  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz

# 7 Show external URLs
.PHONY: external-urls
external-urls: fqdn
	@echo IP address of Load balancer: $(IP)
	@echo https://$(fqdn)/auth
	@echo https://$(fqdn)/identity
	@echo https://$(fqdn)/operate
	@echo https://$(fqdn)/tasklist
	@echo https://$(fqdn)/optimize
	@echo zbctl status --address $(fqdn):443

# 8 public-zeebe-ingress : add an ingress for GRPC communication to zeebe-gateway
.PHONY: public-zeebe-ingress
public-zeebe-ingress: fqdn
	cat $(root)/azure/include/public-zeebe-ingress.yaml | sed -E "s/MY_HOSTNAME/$(fqdn)/g;" | kubectl create -n $(namespace) -f -

# Optional: Run 'make config-keycloak' from camunda.mk to allow non-ssl connections to Keycloak

### <--- End of setup --->

# Remove nginx ingress and Camunda from cluster
.PHONY: clean
clean: clean-camunda clean-ingress clean-cert-manager
	rm -f $(chartValues)

include $(root)/include/camunda.mk
include $(root)/include/ingress-nginx.mk
include $(root)/include/cert-manager.mk
include $(root)/azure/include/aks.mk
include $(root)/azure/include/fileshare.mk
include $(root)/echo-server/echo.mk
include $(root)/oauth2-proxy/oauth2.mk
include $(root)/metrics/metrics.mk


