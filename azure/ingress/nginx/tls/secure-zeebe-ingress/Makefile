# ------------------------------------
# Set the following for your specific environment
# Already have a Cluster? Set these values to point to your existing environment
# Otherwise, these values will be used to create a new Cluster

region ?= eastus
clusterName ?= MY_CLUSTER_NAME
resourceGroup ?= MY_CLUSTER_NAME-rg

# Configure the fully qualified domain name
# A fully qualified domain name is built by appending `dnsLabel` together with `baseDomainName`.
# By default, in Azure, we can use azure provided host names. Or replace baseDomainName with your own domain name
baseDomainName ?= $(region).cloudapp.azure.com
# baseDomainName ?= mydomain.com

# Replace `MY_DNS_LABEL`. For example, if you set `dnsLabel` to `camunda`, then the fqdn will be `camunda.mydomain.com`
dnsLabel ?= MY_DNS_LABEL

machineType ?= Standard_A8_v2
minSize ?= 1
maxSize ?= 6
certEmail ?= YOUR_EMAIL@camunda.com

# ------------------------------------
# The following variables should not be changed except for advanced use cases

root ?= $(shell pwd)/../../../../..

fqdn ?= $(dnsLabel).$(baseDomainName)
# fqdn = $(IP).nip.io

# Camunda components will be installed into the following Kubernetes namespace
namespace ?= camunda
# Helm release name
release ?= camunda
# Helm chart coordinates for Camunda
chart ?= camunda/camunda-platform

# This file will be generated by make targets
chartValues ?= camunda-values-nginx-tls.yaml

.PHONY: all
all: cert-manager letsencrypt-staging azure-ingress-nginx camunda-values-nginx-tls.yaml camunda annotate-ingress-tls external-urls

# 0 kube from aks.mk: Create Kubernetes cluster. (No aplication gateway required)
.PHONY: kube
kube: kube-aks

# 1 cert-manager from cert-manager.mk: create certificate manager for tls

# 2 letsencrypt-staging/-prod from cert-manager.mk: create letsencrypt cert issuer

# 3 azure-ingress-nginx create nginx ingress controller with dns and tls

# 4 create camunda-values-nginx.yaml with external ip from ingress controller's Loadbalancer
.PHONY: camunda-values-nginx-tls.yaml
camunda-values-nginx-tls.yaml:
	@echo Ingress controller will use fqdn: $(fqdn)
	@sed "s/dnslabel.location.cloudapp.azure.com/$(fqdn)/g;" camunda-values.yaml > ./$(chartValues)

# 5 helm install camunda from camunda.mk with own tls config, combined ingress

# 6 annotate-ingress-tls from cert-manager.mk: add cluster-issuer annotation to nginx

# 7 Show external URLs
.PHONY: external-urls
external-urls: ingress-ip-from-service
	@echo Hostname of Load balancer: $(IP)
	@echo https://$(fqdn)/auth
	@echo https://$(fqdn)/identity
	@echo https://$(fqdn)/operate
	@echo https://$(fqdn)/tasklist
	@echo https://$(fqdn)/optimize
	@echo zbctl status --address $(fqdn):443

# 8 Setup oauth2 proxy
.PHONY: oauth2-proxy
oauth2-proxy:
	helm repo add azure-marketplace https://marketplace.azurecr.io/helm/v1/repo
	helm repo update azure-marketplace
	helm install oauth2-proxy azure-marketplace/oauth2-proxy -n ingress-nginx --create-namespace -f oauth2-values.yaml
	cat oauth2-ingress.yaml | sed -E "s/dnslabel.location.cloudapp.azure.com/$(fqdn)/g" | kubectl apply -f -
# helm repo add bitnami https://charts.bitnami.com/bitnami
# helm install my-release bitnami/oauth2-proxy
# Optional: Run 'make config-keycloak' from camunda.mk to allow non-ssl connections to Keycloak

.PHONY: update-oauth2
update-oauth2:
	helm upgrade oauth2-proxy azure-marketplace/oauth2-proxy -f oauth2-values.yaml -n ingress-nginx

### <--- End of setup --->

.PHONY: update-camunda-tls
update-camunda-tls: camunda-values-nginx-tls.yaml camunda

# Remove nginx ingress and Camunda from cluster
.PHONY: clean
clean: clean-camunda clean-ingress clean-cert-manager
	rm -f $(chartValues)

PHONY: logs-nginx
logs-nginx:
	kubectl logs -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx -f

.PHONY: logs-oauth2
logs-oauth2:
	kubectl logs -n ingress-nginx -l app.kubernetes.io/name=oauth2-proxy -f

.PHONY: keycloak-oauth2
keycloak-oauth2:
	kubectl wait --for=condition=Ready pod -l app.kubernetes.io/component=keycloak --timeout=600s
# kubectl -n $(namespace) exec -it $(release)-keycloak-0 -- /opt/bitnami/keycloak/bin/kcadm.sh update realms/master -s sslRequired=NONE --server http://localhost:8080/auth --realm master --user admin --password $(kcPassword)
	kubectl -n $(namespace) exec -it $(release)-keycloak-0 -- /opt/bitnami/keycloak/bin/kcadm.sh update realms/camunda-platform -s sslRequired=NONE --server http://localhost:8080/auth --realm master --user admin --password $(kcPassword)

include $(root)/include/camunda.mk
include $(root)/include/ingress-nginx.mk
include $(root)/include/cert-manager.mk
include $(root)/azure/include/aks.mk
include $(root)/azure/include/fileshare.mk
include ./echo-server/echo.mk

