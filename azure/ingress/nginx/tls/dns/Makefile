# ------------------------------------
# Set the following for your specific environment
# Already have a Cluster? Set these values to point to your existing environment
# Otherwise, these values will be used to create a new Cluster

region ?= eastus
clusterName ?= MY_CLUSTER_NAME
resourceGroup ?= MY_CLUSTER_NAME-rg
# This baseDomainName will be combined with subDomain Name: subDomainName.baseDomainName
baseDomainName ?= BASE_DOMAIN_NAME
subDomainName ?= SUB_DOMAIN_NAME
machineType ?= Standard_A8_v2
minSize ?= 1
maxSize ?= 6
certEmail ?= YOUR_EMAIL@camunda.com

# ------------------------------------
# The following variables should not be changed except for advanced use cases

root ?= $(shell pwd)/../../../../..
fqdn ?= ${subDomainName}.${baseDomainName}

# Camunda components will be installed into the following Kubernetes namespace
namespace ?= camunda
# Helm release name
release ?= camunda
# Helm chart coordinates for Camunda
chart ?= camunda/camunda-platform

# This file will be generated by make targets
chartValues ?= camunda-values-nginx-tls.yaml

.PHONY: all
all: cert-manager letsencrypt-staging ingress-nginx-tls camunda-values-nginx-tls.yaml camunda annotate-ingress-tls external-urls
# all: cert-manager letsencrypt-staging ingress-nginx-tls azure-dns-zone ingress-ip-from-service azure-dns-record camunda-values-nginx-tls.yaml camunda annotate-ingress-tls external-urls

# 0 kube from aks.mk: Create Kubernetes cluster. (No aplication gateway required)
.PHONY: kube
kube: kube-nginx

# 1 cert-manager from cert-manager.mk: create certificate manager for tls

# 2 letsencrypt-staging/-prod from cert-manager.mk: create letsencrypt cert issuer

# 3 create nginx ingress controller with dns and tls

# 4a azure-dns-zone to setup a Azure DNS Zone
# 4b azure-dns-record to create A record that points to ingress controller

# 5 create camunda-values-nginx.yaml with external ip from ingress controller's Loadbalancer
.PHONY: camunda-values-nginx-tls.yaml
camunda-values-nginx-tls.yaml: ingress-hostname-from-service
	@echo Ingress controller will use fqdn: $(fqdn)
	@sed "s/dnslabel.location.cloudapp.azure.com/$(fqdn)/g;" ../camunda-values.yaml > ./$(chartValues)

# 6 helm install camunda from camunda.mk with own tls config, combined ingress

# 7 annotate-ingress-tls from cert-manager.mk: add cluster-issuer annotation to nginx

# 8 Show external URLs
.PHONY: external-urls
external-urls: ingress-ip-from-service
	@echo IP Address of Load balancer: $(IP)
	@echo https://$(fqdn)/auth
	@echo https://$(fqdn)/identity
	@echo https://$(fqdn)/operate
	@echo https://$(fqdn)/tasklist
	@echo https://$(fqdn)/optimize
	@echo zbctl status --address $(fqdn):443

# 9 public-zeebe-ingress : add an ingress for GRPC communication to zeebe-gateway
.PHONY: public-zeebe-ingress
public-zeebe-ingress: 
	cat $(root)/azure/include/public-zeebe-ingress.yaml | sed -E "s/MY_HOSTNAME/$(fqdn)/g;" | kubectl create -n $(namespace) -f -

# Optional: Run 'make config-keycloak' from camunda.mk to allow non-ssl connections to Keycloak

### <--- End of setup --->

# Remove nginx ingress and Camunda from cluster
.PHONY: clean
clean: clean-camunda clean-ingress clean-cert-manager
	rm -f $(chartValues)

include $(root)/include/camunda.mk
include $(root)/include/ingress-nginx.mk
include $(root)/include/cert-manager.mk
include $(root)/azure/include/aks.mk
include $(root)/azure/include/fileshare.mk
# include $(root)/include/zbctl.mk


